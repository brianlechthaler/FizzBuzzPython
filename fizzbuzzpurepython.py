# -*- coding: utf-8 -*-
"""FizzBuzzPurePython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_iNfPfly2uESY9MNTkYfVbXVAliYhIIu

# FizzBuzz in Pure Python

Last updated *Monday, May 11th, 2021.*

by [Brian Lechthaler](https://github.com/brianlechthaler) (they/them)

## Define Standard Rules
In case the `fizz` and/or `buzz` values differ from 3 and 5 respectively, and/or the range `start`/`stop` points differ from `0` and `100` respectively.
"""

standard_rules = {
    'divisor': { # Standard Divisor Rules
        'fizz': 3,    # Number should produce a 'fizz' if evenly divisible by 3.
        'buzz': 5},   # Number should produce a 'fizz' if evenly divisible by 5.
    'range': {   # Standard Range Rules
        'start': 0,   # Define the starting point of the range as 0.
        'stop': 100}} # Define the ending point of the range as 100.

"""## Define a Class for Checking Divisiblity
This will help us determine whether our number is a `Fizz`, `Buzz`, or `FizzBuzz`!
"""

# Commented out IPython magic to ensure Python compatibility.
class DivisibilityCheck:
  def __init__(self,
               dividend=None,
               divisor=None):
    # Set the dividend
    self.dividend = dividend
    # Set the divisor
    self.divisor = divisor

  def euclidian_quotient(self):
    # Return the remainder euclidian quotient
    return (self.dividend
            %
            self.divisor)
    
  def evenly_divisible(self):
    # Simply return true if the remainder is 0, otherwise return false.
    return True if self.euclidian_quotient() == 0 else False

"""## Create Class for `FizzBuzz`ing a Specified Range
Creates a range from specified rules, then using euclidian division determines if a given number should be declared `Fizz`, `Buzz`, or `FizzBuzz`.

Given $x$ is our integer, if the remainder $\mathbb{R}$ for the euclidian quotient of $x/3=0$, mark the integer as `Fizz`. Similarly, if the remainder  $\mathbb{R}$ for the euclidian quotient of $x/5=0$, mark the integer as `Buzz`. Should the remainder $\mathbb{R}$ for the euclidian quotients $x/5,3=0$, mark the integer as `FizzBuzz`.
"""

class FizzBuzzRuntime:
  def __init__(self,
               rules=standard_rules):
    
    # Set the divisor value for 'fizz' from specified rules
    self.fizz = rules['divisor']['fizz']

    # Set the divisor value for 'buzz' from specified rules
    self.buzz = rules['divisor']['buzz']

    # Create a range from specified rules
    self.candidates = range(
        rules['range']['start'],
        rules['range']['stop']
    )

  def is_fizz(self,
              candidate=None):
    # Run the DivisibilityCheck, returning results.
    return DivisibilityCheck(dividend=candidate,
                             divisor=self.fizz).evenly_divisible()
    
  def is_buzz(self,
              candidate=None):
    # Run the DivisibilityCheck, returning results.
    return DivisibilityCheck(dividend=candidate,
                             divisor=self.buzz).evenly_divisible()
    
  def int_to_fizzbuzz(self,
                      integer=None):
    # It's impossible to divide anything by zero...
    if integer == 0:
      # So let's make sure we don't do that.
      return integer

    string_to_return = ''
    
    # Check if we need to 'Fizz'
    if self.is_fizz(integer) is True:
      # Append 'Fizz' to the string we will return
      string_to_return += 'Fizz'
    
    # Check if we need to 'Buzz'
    if self.is_buzz(integer) is True:
      # Append 'Buzz' to the string we will return
      string_to_return += 'Buzz'
    
    # Prevent returning an empty string if no match for fizz or buzz
    if string_to_return is not '':
      return string_to_return
    elif string_to_return is '':
      return integer

  def run(self):
    # Run the algorithm using the magic of list comprehensions
    return [self.int_to_fizzbuzz(candidate) 
            for candidate 
            in self.candidates]

"""## Verify Everything Works
No point in writing all this code if we can't verify it works as intended! Here we finally run the runtime and see the results.
"""

FizzBuzzRuntime().run()